* {
    box-sizing: border-box;
  }
  
  body {
    margin: 0;
    font-family: sans-serif;
    background: #f5f6f7;
  }
  
  .header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
  }
  
  .gallery {
    display: flex;
    flex-direction: row;
    /* Allows the content to wrap around when it runs out of space. */
    flex-wrap: wrap;
    /* The justify-content property determines how the items inside a flex container are positioned along 
    the main axis, affecting their position and the space around them. */
    justify-content: center;
    /* The align-items property positions the flex content along the cross axis. 
    In this case, with your flex-direction set to row, your cross axis would be vertical. */
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /* Your images need some space between them.
    The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. 
    The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. 
    You apply the property to the container element. */
    gap: 16px;
  }
  
  .gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /* Notice how some of your images have become distorted. This is because the images have different aspect ratios. 
    Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave. */
    object-fit: cover;
    /* Smooth out your images a bit by giving the .gallery img selector a border-radius property with 10px set as the value. */
    border-radius: 10px;
  }

  /* The ::after pseudo-element creates an element that is the last child of the selected element. 
  You can use it to add an empty element after the last image. 
  If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. 
  Right now, it is in the center because you set justify-content: center on the flex container. */
  
  .gallery::after {
    content: "";
    width: 350px;
  }